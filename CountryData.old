{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import json\n",
    "import requests\n",
    "import gmaps\n",
    "import math\n",
    "import config as cfg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please select a Country or Region to search:Yemen\n"
     ]
    }
   ],
   "source": [
    "file = \"Resources/CountriesOfTheWorld.csv\"\n",
    "\n",
    "rawCountriesDF = pd.read_csv(file)\n",
    "\n",
    "#Extract region/country for input validation|\n",
    "countryValidationRaw = rawCountriesDF[['Country','Region']]\n",
    "countryValidationRaw.dropna()\n",
    "#force case to upper due to case sensitivity\n",
    "countryValidationUpper = countryValidationRaw['Country'].str.upper()\n",
    "regionValidationUpper = countryValidationRaw['Region'].str.upper()\n",
    "countryValidation = pd.DataFrame({'Country': countryValidationUpper,\n",
    "                                 'Region': regionValidationUpper})\n",
    "\n",
    "#get input from user testing if it is a country or region\n",
    "isValid = False\n",
    "while isValid == False:\n",
    "    targetLocation = input(\"Please select a Country or Region to search:\").upper()\n",
    "    if countryValidation['Country'].str.contains(targetLocation).any() or countryValidation['Region'].str.contains(targetLocation).any() :\n",
    "        isValid = True\n",
    "    else:\n",
    "        isValid = False\n",
    "        print('Please enter a valid Country or Region')\n",
    "\n",
    "isCountry = False\n",
    "if countryValidation['Country'].str.contains(targetLocation).any():\n",
    "    isCountry = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lat</th>\n",
       "      <th>lng</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>15.552727</td>\n",
       "      <td>48.516388</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         lat        lng\n",
       "0  15.552727  48.516388"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#get the coordinates for google maps API\n",
    "gmaps.configure(api_key=cfg.key)\n",
    "\n",
    "#build request\n",
    "params = {'key': cfg.key}\n",
    "params['address'] = f\"{targetLocation}\"\n",
    "\n",
    "response = requests.get(cfg.baseApiUrl, params=params)\n",
    "\n",
    "#convert response to json\n",
    "response = response.json()\n",
    "\n",
    "\n",
    "coordinates = pd.DataFrame({'lat': response[\"results\"][0][\"geometry\"][\"location\"][\"lat\"],\n",
    "                            'lng': response[\"results\"][0][\"geometry\"][\"location\"][\"lng\"]}, index=[0])\n",
    "\n",
    "coordinates\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6ec64ee08f534caab77eec8c843ed2b8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Figure(layout=FigureLayout(border='1px solid black', height='300px', margin='0 auto 0 auto', padding='1px', wiâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#get map of requested country region\n",
    "coordinate = [coordinates.loc[0,'lat'], coordinates.loc[0,'lng']]\n",
    "coordinate\n",
    "zoomLevel = 0\n",
    "if isCountry:\n",
    "    zoomLevel = 5\n",
    "else:\n",
    "    zoomLevel = 2\n",
    "    \n",
    "figureLayout = {\n",
    "    'width': '400px',\n",
    "    'height': '300px',\n",
    "    'border': '1px solid black',\n",
    "    'padding': '1px',\n",
    "    'margin': '0 auto 0 auto'}\n",
    "\n",
    "fig = gmaps.figure(layout=figureLayout, center=coordinate, zoom_level=zoomLevel)\n",
    "fig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ggiaq\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py:576: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[item_labels[indexer[info_axis]]] = value\n",
      "C:\\Users\\ggiaq\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py:494: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[item] = s\n",
      "C:\\Users\\ggiaq\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:21: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Region</th>\n",
       "      <th>Birthrate</th>\n",
       "      <th>Deathrate</th>\n",
       "      <th>Climate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>ASIA (EX. NEAR EAST)</td>\n",
       "      <td>46.60</td>\n",
       "      <td>20.34</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Albania</td>\n",
       "      <td>EASTERN EUROPE</td>\n",
       "      <td>15.11</td>\n",
       "      <td>5.22</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Algeria</td>\n",
       "      <td>NORTHERN AFRICA</td>\n",
       "      <td>17.14</td>\n",
       "      <td>4.61</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>American Samoa</td>\n",
       "      <td>OCEANIA</td>\n",
       "      <td>22.46</td>\n",
       "      <td>3.27</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Andorra</td>\n",
       "      <td>WESTERN EUROPE</td>\n",
       "      <td>8.71</td>\n",
       "      <td>6.25</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>220</td>\n",
       "      <td>Virgin Islands</td>\n",
       "      <td>LATIN AMER. &amp; CARIB</td>\n",
       "      <td>13.96</td>\n",
       "      <td>6.43</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>222</td>\n",
       "      <td>West Bank</td>\n",
       "      <td>NEAR EAST</td>\n",
       "      <td>31.67</td>\n",
       "      <td>3.92</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>224</td>\n",
       "      <td>Yemen</td>\n",
       "      <td>NEAR EAST</td>\n",
       "      <td>42.89</td>\n",
       "      <td>8.30</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>225</td>\n",
       "      <td>Zambia</td>\n",
       "      <td>SUB-SAHARAN AFRICA</td>\n",
       "      <td>41.00</td>\n",
       "      <td>19.93</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>226</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>SUB-SAHARAN AFRICA</td>\n",
       "      <td>28.01</td>\n",
       "      <td>21.84</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>202 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Country                               Region  Birthrate  \\\n",
       "0       Afghanistan         ASIA (EX. NEAR EAST)               46.60   \n",
       "1           Albania   EASTERN EUROPE                           15.11   \n",
       "2           Algeria   NORTHERN AFRICA                          17.14   \n",
       "3    American Samoa   OCEANIA                                  22.46   \n",
       "4           Andorra   WESTERN EUROPE                            8.71   \n",
       "..               ...                                  ...        ...   \n",
       "220  Virgin Islands               LATIN AMER. & CARIB          13.96   \n",
       "222       West Bank   NEAR EAST                                31.67   \n",
       "224           Yemen   NEAR EAST                                42.89   \n",
       "225          Zambia   SUB-SAHARAN AFRICA                       41.00   \n",
       "226        Zimbabwe   SUB-SAHARAN AFRICA                       28.01   \n",
       "\n",
       "     Deathrate  Climate  \n",
       "0        20.34      1.0  \n",
       "1         5.22      3.0  \n",
       "2         4.61      1.0  \n",
       "3         3.27      2.0  \n",
       "4         6.25      3.0  \n",
       "..         ...      ...  \n",
       "220       6.43      2.0  \n",
       "222       3.92      3.0  \n",
       "224       8.30      1.0  \n",
       "225      19.93      2.0  \n",
       "226      21.84      2.0  \n",
       "\n",
       "[202 rows x 5 columns]"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#using input for map API, filter CSV results and graphs based on input\n",
    "birthMortalityDF = rawCountriesDF[['Country', 'Region', 'Birthrate', 'Deathrate', 'Climate']]\n",
    "\n",
    "##data scrubbing\n",
    "#convert numbers to US standards replacing , with .\n",
    "climateConversion = birthMortalityDF['Climate'].str.replace(',','.')\n",
    "climate = climateConversion.astype(float)\n",
    "climate = climate.round(0)\n",
    "\n",
    "birthRateConversion = birthMortalityDF['Birthrate'].str.replace(',','.')\n",
    "birthRate = birthRateConversion.astype(float)\n",
    "\n",
    "deathRateConversion = birthMortalityDF['Deathrate'].str.replace(',','.')\n",
    "deathRate = deathRateConversion.astype(float)\n",
    "\n",
    "#add data back to DF and drop bad rows\n",
    "birthMortalityDF.loc[:,'Climate'] = climate\n",
    "birthMortalityDF.loc[:,'Birthrate'] = birthRate\n",
    "birthMortalityDF.loc[:,'Deathrate'] = deathRate\n",
    "\n",
    "birthMortalityDF.dropna(how='any', inplace=True)\n",
    "birthMortalityDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The lower quartile of Dry-Tropical Birthrates is: 18.77\n",
      "The upper quartile of Dry-Tropical Birthrates is: 33.04\n",
      "The interquartile range of Dry-Tropical Birthrates is: 14.28\n",
      "\n",
      "The lower quartile of Dry-Tropical Deathrates is: 4.69\n",
      "The upper quartile of Dry-Tropical Deathrates is: 13.28\n",
      "The interquartile range of Dry-Tropical Deathrates is: 8.59\n",
      "\n",
      "Values below -2.64 could be outliers for births.\n",
      "Values above 54.46 could be outliers for births.\n",
      "Values below -8.19 could be outliers for deaths.\n",
      "Values above 26.16 could be outliers for deaths.\n",
      "\n",
      "there are 0 birth outliers.\n",
      "there are 1 death outliers.\n",
      "\n",
      "The lower quartile of Wet-Tropical Birthrates is: 17.58\n",
      "The upper quartile of Wet-Tropical Birthrates is: 34.6\n",
      "The interquartile range of Wet-Tropical Birthrates is: 17.02\n",
      "\n",
      "The lower quartile of Wet-Tropical Deathrates is: 5.56\n",
      "The upper quartile of Wet-Tropical Deathrates is: 10.7\n",
      "The interquartile range of Wet-Tropical Deathrates is: 5.15\n",
      "\n",
      "Values below -7.94 could be outliers for births.\n",
      "Values above 60.12 could be outliers for births.\n",
      "Values below -2.16 could be outliers for deaths.\n",
      "Values above 18.43 could be outliers for deaths.\n",
      "\n",
      "there are 0 birth outliers.\n",
      "there are 8 death outliers.\n",
      "\n",
      "The lower quartile of Temperate Birthrates is: 9.72\n",
      "The upper quartile of Temperate Birthrates is: 14.61\n",
      "The interquartile range of Temperate Birthrates is: 4.9\n",
      "\n",
      "The lower quartile of Temperate Deathrates is: 7.43\n",
      "The upper quartile of Temperate Deathrates is: 10.4\n",
      "The interquartile range of Temperate Deathrates is: 2.96\n",
      "\n",
      "Values below 2.37 could be outliers for births.\n",
      "Values above 21.96 could be outliers for births.\n",
      "Values below 2.98 could be outliers for deaths.\n",
      "Values above 14.84 could be outliers for deaths.\n",
      "\n",
      "there are 5 birth outliers.\n",
      "there are 2 death outliers.\n",
      "\n",
      "The lower quartile of Mediterranean Birthrates is: 10.45\n",
      "The upper quartile of Mediterranean Birthrates is: 12.05\n",
      "The interquartile range of Mediterranean Birthrates is: 1.6\n",
      "\n",
      "The lower quartile of Mediterranean Deathrates is: 8.24\n",
      "The upper quartile of Mediterranean Deathrates is: 9.35\n",
      "The interquartile range of Mediterranean Deathrates is: 1.11\n",
      "\n",
      "Values below 8.04 could be outliers for births.\n",
      "Values above 14.45 could be outliers for births.\n",
      "Values below 6.58 could be outliers for deaths.\n",
      "Values above 11.01 could be outliers for deaths.\n",
      "\n",
      "there are 1 birth outliers.\n",
      "there are 1 death outliers.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#calculate the IQR for each climate\n",
    "dryTropicalBirth = pd.DataFrame({'Birthrate': birthMortalityDF.loc[(birthMortalityDF[\"Climate\"] == 1)]['Birthrate']})\n",
    "wetTropicalBirth = pd.DataFrame({'Birthrate': birthMortalityDF.loc[(birthMortalityDF[\"Climate\"] == 2)]['Birthrate']})\n",
    "temperateBirth = pd.DataFrame({'Birthrate': birthMortalityDF.loc[(birthMortalityDF[\"Climate\"] == 3)]['Birthrate']})\n",
    "mediterraneanBirth = pd.DataFrame({'Birthrate': birthMortalityDF.loc[(birthMortalityDF[\"Climate\"] == 4)]['Birthrate']})\n",
    "\n",
    "dryTropicalDeath = pd.DataFrame({'Deathrate': birthMortalityDF.loc[(birthMortalityDF[\"Climate\"] == 1)]['Deathrate']})\n",
    "wetTropicalDeath = pd.DataFrame({'Deathrate': birthMortalityDF.loc[(birthMortalityDF[\"Climate\"] == 2)]['Deathrate']})\n",
    "temperateDeath = pd.DataFrame({'Deathrate': birthMortalityDF.loc[(birthMortalityDF[\"Climate\"] == 3)]['Deathrate']})\n",
    "mediterraneanDeath = pd.DataFrame({'Deathrate': birthMortalityDF.loc[(birthMortalityDF[\"Climate\"] == 4)]['Deathrate']})\n",
    "\n",
    "quartilesB = dryTropicalBirth['Birthrate'].quantile([.25,.5,.75])\n",
    "lowerQB = quartilesB[0.25]\n",
    "upperQB = quartilesB[0.75]\n",
    "iqrB = upperQB-lowerQB\n",
    "\n",
    "quartilesD = dryTropicalDeath['Deathrate'].quantile([.25,.5,.75])\n",
    "lowerQD = quartilesD[0.25]\n",
    "upperQD = quartilesD[0.75]\n",
    "iqrD = upperQD-lowerQD\n",
    "\n",
    "print(f\"The lower quartile of Dry-Tropical Birthrates is: {round(lowerQB,2)}\")\n",
    "print(f\"The upper quartile of Dry-Tropical Birthrates is: {round(upperQB,2)}\")\n",
    "print(f\"The interquartile range of Dry-Tropical Birthrates is: {round(iqrB,2)}\")\n",
    "print('')\n",
    "print(f\"The lower quartile of Dry-Tropical Deathrates is: {round(lowerQD,2)}\")\n",
    "print(f\"The upper quartile of Dry-Tropical Deathrates is: {round(upperQD,2)}\")\n",
    "print(f\"The interquartile range of Dry-Tropical Deathrates is: {round(iqrD,2)}\")\n",
    "\n",
    "lowerBoundBDT = lowerQB - (1.5*iqrB)\n",
    "upperBoundBDT = upperQB + (1.5*iqrB)\n",
    "\n",
    "lowerBoundDDT = lowerQD - (1.5*iqrD)\n",
    "upperBoundDDT = upperQD + (1.5*iqrD)\n",
    "print('')\n",
    "print(f\"Values below {round(lowerBoundBDT,2)} could be outliers for births.\")\n",
    "print(f\"Values above {round(upperBoundBDT,2)} could be outliers for births.\")\n",
    "print(f\"Values below {round(lowerBoundDDT,2)} could be outliers for deaths.\")\n",
    "print(f\"Values above {round(upperBoundDDT,2)} could be outliers for deaths.\")\n",
    "print('')\n",
    "dryTropicalBirthOutliers = dryTropicalBirth.loc[(dryTropicalBirth['Birthrate'] < lowerBoundBDT) | (dryTropicalBirth['Birthrate'] > upperBoundBDT)]\n",
    "dryTropicalBirthOutCount = dryTropicalBirthOutliers['Birthrate'].count()\n",
    "print(('there are {0} birth outliers.').format(dryTropicalBirthOutCount))\n",
    "\n",
    "dryTropicalDeathOutliers = dryTropicalDeath.loc[(dryTropicalDeath['Deathrate'] < lowerBoundDDT) | (dryTropicalDeath['Deathrate'] > upperBoundDDT)]\n",
    "dryTropicalDeathOutCount = dryTropicalDeathOutliers['Deathrate'].count()\n",
    "print(('there are {0} death outliers.').format(dryTropicalDeathOutCount))\n",
    "\n",
    "print('')\n",
    "quartilesB = wetTropicalBirth['Birthrate'].quantile([.25,.5,.75])\n",
    "lowerQB = quartilesB[0.25]\n",
    "upperQB = quartilesB[0.75]\n",
    "iqrB = upperQB-lowerQB\n",
    "\n",
    "quartilesD = wetTropicalDeath['Deathrate'].quantile([.25,.5,.75])\n",
    "lowerQD = quartilesD[0.25]\n",
    "upperQD = quartilesD[0.75]\n",
    "iqrD = upperQD-lowerQD\n",
    "\n",
    "print(f\"The lower quartile of Wet-Tropical Birthrates is: {round(lowerQB,2)}\")\n",
    "print(f\"The upper quartile of Wet-Tropical Birthrates is: {round(upperQB,2)}\")\n",
    "print(f\"The interquartile range of Wet-Tropical Birthrates is: {round(iqrB,2)}\")\n",
    "print('')\n",
    "print(f\"The lower quartile of Wet-Tropical Deathrates is: {round(lowerQD,2)}\")\n",
    "print(f\"The upper quartile of Wet-Tropical Deathrates is: {round(upperQD,2)}\")\n",
    "print(f\"The interquartile range of Wet-Tropical Deathrates is: {round(iqrD,2)}\")\n",
    "\n",
    "lowerBoundBWT = lowerQB - (1.5*iqrB)\n",
    "upperBoundBWT = upperQB + (1.5*iqrB)\n",
    "\n",
    "lowerBoundDWT = lowerQD - (1.5*iqrD)\n",
    "upperBoundDWT = upperQD + (1.5*iqrD)\n",
    "print('')\n",
    "print(f\"Values below {round(lowerBoundBWT,2)} could be outliers for births.\")\n",
    "print(f\"Values above {round(upperBoundBWT,2)} could be outliers for births.\")\n",
    "print(f\"Values below {round(lowerBoundDWT,2)} could be outliers for deaths.\")\n",
    "print(f\"Values above {round(upperBoundDWT,2)} could be outliers for deaths.\")\n",
    "print('')\n",
    "wetTropicalBirthOutliers = wetTropicalBirth.loc[(wetTropicalBirth['Birthrate'] < lowerBoundBWT) | (wetTropicalBirth['Birthrate'] > upperBoundBWT)]\n",
    "wetTropicalBirthOutCount = wetTropicalBirthOutliers['Birthrate'].count()\n",
    "print(('there are {0} birth outliers.').format(wetTropicalBirthOutCount))\n",
    "\n",
    "wetTropicalDeathOutliers = wetTropicalDeath.loc[(wetTropicalDeath['Deathrate'] < lowerBoundDWT) | (wetTropicalDeath['Deathrate'] > upperBoundDWT)]\n",
    "wetTropicalDeathOutCount = wetTropicalDeathOutliers['Deathrate'].count()\n",
    "print(('there are {0} death outliers.').format(wetTropicalDeathOutCount))\n",
    "\n",
    "print('')\n",
    "quartilesB = temperateBirth['Birthrate'].quantile([.25,.5,.75])\n",
    "lowerQB = quartilesB[0.25]\n",
    "upperQB = quartilesB[0.75]\n",
    "iqrB = upperQB-lowerQB\n",
    "\n",
    "quartilesD = temperateDeath['Deathrate'].quantile([.25,.5,.75])\n",
    "lowerQD = quartilesD[0.25]\n",
    "upperQD = quartilesD[0.75]\n",
    "iqrD = upperQD-lowerQD\n",
    "\n",
    "print(f\"The lower quartile of Temperate Birthrates is: {round(lowerQB,2)}\")\n",
    "print(f\"The upper quartile of Temperate Birthrates is: {round(upperQB,2)}\")\n",
    "print(f\"The interquartile range of Temperate Birthrates is: {round(iqrB,2)}\")\n",
    "print('')\n",
    "print(f\"The lower quartile of Temperate Deathrates is: {round(lowerQD,2)}\")\n",
    "print(f\"The upper quartile of Temperate Deathrates is: {round(upperQD,2)}\")\n",
    "print(f\"The interquartile range of Temperate Deathrates is: {round(iqrD,2)}\")\n",
    "\n",
    "lowerBoundBT = lowerQB - (1.5*iqrB)\n",
    "upperBoundBT = upperQB + (1.5*iqrB)\n",
    "\n",
    "lowerBoundDT = lowerQD - (1.5*iqrD)\n",
    "upperBoundDT = upperQD + (1.5*iqrD)\n",
    "print('')\n",
    "print(f\"Values below {round(lowerBoundBT,2)} could be outliers for births.\")\n",
    "print(f\"Values above {round(upperBoundBT,2)} could be outliers for births.\")\n",
    "print(f\"Values below {round(lowerBoundDT,2)} could be outliers for deaths.\")\n",
    "print(f\"Values above {round(upperBoundDT,2)} could be outliers for deaths.\")\n",
    "print('')\n",
    "temperateBirthOutliers = temperateBirth.loc[(temperateBirth['Birthrate'] < lowerBoundBT) | (temperateBirth['Birthrate'] > upperBoundBT)]\n",
    "temperateBirthOutCount = temperateBirthOutliers['Birthrate'].count()\n",
    "print(('there are {0} birth outliers.').format(temperateBirthOutCount))\n",
    "\n",
    "temperateDeathOutliers = temperateDeath.loc[(temperateDeath['Deathrate'] < lowerBoundDT) | (temperateDeath['Deathrate'] > upperBoundDT)]\n",
    "temperateDeathOutCount = temperateDeathOutliers['Deathrate'].count()\n",
    "print(('there are {0} death outliers.').format(temperateDeathOutCount))\n",
    "\n",
    "print('')\n",
    "quartilesB = mediterraneanBirth['Birthrate'].quantile([.25,.5,.75])\n",
    "lowerQB = quartilesB[0.25]\n",
    "upperQB = quartilesB[0.75]\n",
    "iqrB = upperQB-lowerQB\n",
    "\n",
    "quartilesD = mediterraneanDeath['Deathrate'].quantile([.25,.5,.75])\n",
    "lowerQD = quartilesD[0.25]\n",
    "upperQD = quartilesD[0.75]\n",
    "iqrD = upperQD-lowerQD\n",
    "\n",
    "print(f\"The lower quartile of Mediterranean Birthrates is: {round(lowerQB,2)}\")\n",
    "print(f\"The upper quartile of Mediterranean Birthrates is: {round(upperQB,2)}\")\n",
    "print(f\"The interquartile range of Mediterranean Birthrates is: {round(iqrB,2)}\")\n",
    "print('')\n",
    "print(f\"The lower quartile of Mediterranean Deathrates is: {round(lowerQD,2)}\")\n",
    "print(f\"The upper quartile of Mediterranean Deathrates is: {round(upperQD,2)}\")\n",
    "print(f\"The interquartile range of Mediterranean Deathrates is: {round(iqrD,2)}\")\n",
    "\n",
    "lowerBoundBM = lowerQB - (1.5*iqrB)\n",
    "upperBoundBM = upperQB + (1.5*iqrB)\n",
    "\n",
    "lowerBoundDM = lowerQD - (1.5*iqrD)\n",
    "upperBoundDM= upperQD + (1.5*iqrD)\n",
    "print('')\n",
    "print(f\"Values below {round(lowerBoundBM,2)} could be outliers for births.\")\n",
    "print(f\"Values above {round(upperBoundBM,2)} could be outliers for births.\")\n",
    "print(f\"Values below {round(lowerBoundDM,2)} could be outliers for deaths.\")\n",
    "print(f\"Values above {round(upperBoundDM,2)} could be outliers for deaths.\")\n",
    "\n",
    "print('')\n",
    "mediterraneanBirthOutliers = mediterraneanBirth.loc[(mediterraneanBirth['Birthrate'] < lowerBoundBM) | (mediterraneanBirth['Birthrate'] > upperBoundBM)]\n",
    "mediterraneanBirthOutCount = mediterraneanBirthOutliers['Birthrate'].count()\n",
    "print(('there are {0} birth outliers.').format(mediterraneanBirthOutCount))\n",
    "\n",
    "mediterraneanDeathOutliers = mediterraneanDeath.loc[(mediterraneanDeath['Deathrate'] < lowerBoundDM) | (mediterraneanDeath['Deathrate'] > upperBoundDM)]\n",
    "mediterraneanDeathOutCount = mediterraneanDeathOutliers['Deathrate'].count()\n",
    "print(('there are {0} death outliers.').format(mediterraneanDeathOutCount))\n",
    "\n",
    "print('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dry Tropical has no birth outliers.\n",
      "\n",
      "Dry Tropical has the following death outliers:\n",
      "26    Botswana \n",
      "Name: Country, dtype: object\n",
      "\n",
      "Wet Tropical has no birth outliers.\n",
      "\n",
      "Wet Tropical has the following death outliers:\n",
      "39     Central African Rep. \n",
      "117                 Liberia \n",
      "125                  Malawi \n",
      "142              Mozambique \n",
      "183            Sierra Leone \n",
      "194               Swaziland \n",
      "225                  Zambia \n",
      "226                Zimbabwe \n",
      "Name: Country, dtype: object\n",
      "\n",
      "Temperate has the following birth outliers:\n",
      "37     Cape Verde \n",
      "74     Gaza Strip \n",
      "116       Lesotho \n",
      "170        Rwanda \n",
      "222     West Bank \n",
      "Name: Country, dtype: object\n",
      "\n",
      "Temperate has the following death outliers:\n",
      "116    Lesotho \n",
      "170     Rwanda \n",
      "Name: Country, dtype: object\n",
      "\n",
      "Mediterranean has the following birth outliers:\n",
      "106    Kazakhstan \n",
      "Name: Country, dtype: object\n",
      "\n",
      "Mediterranean has the following death outliers:\n",
      "18    Belarus \n",
      "Name: Country, dtype: object\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#find the outlier countries in the given the climate\n",
    "dryTropCountriesB = birthMortalityDF.loc[(birthMortalityDF['Birthrate'] > upperBoundBDT) & (birthMortalityDF['Climate'] == 1)]\n",
    "wetTropCountriesB = birthMortalityDF.loc[(birthMortalityDF['Birthrate'] > upperBoundBWT) & (birthMortalityDF['Climate'] == 2)]\n",
    "tempCountriesB = birthMortalityDF.loc[(birthMortalityDF['Birthrate'] > upperBoundBT) & (birthMortalityDF['Climate'] == 3)]\n",
    "medCountriesB = birthMortalityDF.loc[(birthMortalityDF['Birthrate'] > upperBoundBM) & (birthMortalityDF['Climate'] == 4)]\n",
    "\n",
    "dryTropCountriesD = birthMortalityDF.loc[(birthMortalityDF['Deathrate'] > upperBoundDDT) & (birthMortalityDF['Climate'] == 1)]\n",
    "wetTropCountriesD = birthMortalityDF.loc[(birthMortalityDF['Deathrate'] > upperBoundDWT) & (birthMortalityDF['Climate'] == 2)]\n",
    "tempCountriesD = birthMortalityDF.loc[(birthMortalityDF['Deathrate'] > upperBoundDT) & (birthMortalityDF['Climate'] == 3)]\n",
    "medCountriesD = birthMortalityDF.loc[(birthMortalityDF['Deathrate'] > upperBoundDM) & (birthMortalityDF['Climate'] == 4)]\n",
    "if len(dryTropCountriesB) == 0:\n",
    "    print(\"Dry Tropical has no birth outliers.\")\n",
    "    print('')\n",
    "else:\n",
    "    print(\"Dry Tropical has the following birth outliers:\")\n",
    "    print(dryTropCountriesB.loc[:,'Country'])\n",
    "    print('')\n",
    "if len(dryTropCountriesD) == 0:\n",
    "    print(\"Dry Tropical has no death outliers.\")\n",
    "    print('')\n",
    "else:\n",
    "    print(\"Dry Tropical has the following death outliers:\")\n",
    "    print(dryTropCountriesD.loc[:,'Country'])\n",
    "    print('')\n",
    "    \n",
    "if len(wetTropCountriesB) == 0:\n",
    "    print(\"Wet Tropical has no birth outliers.\")\n",
    "    print('')\n",
    "else:\n",
    "    print(\"Wet Tropical has the following birth outliers:\")\n",
    "    print(wetTropCountriesB.loc[:,'Country'])\n",
    "    print('')\n",
    "if len(wetTropCountriesD) == 0:\n",
    "    print(\"Wet Tropical has no death outliers.\")\n",
    "    print('')\n",
    "else:\n",
    "    print(\"Wet Tropical has the following death outliers:\")\n",
    "    print(wetTropCountriesD.loc[:,'Country'])\n",
    "    print('')\n",
    "    \n",
    "if len(tempCountriesB) == 0:\n",
    "    print(\"Temperate has no birth outliers.\")\n",
    "    print('')\n",
    "else:\n",
    "    print(\"Temperate has the following birth outliers:\")\n",
    "    print(tempCountriesB.loc[:,'Country'])\n",
    "    print('')  \n",
    "if len(tempCountriesD) == 0:\n",
    "    print(\"Temperate has no death outliers.\")\n",
    "    print('')\n",
    "else:\n",
    "    print(\"Temperate has the following death outliers:\")\n",
    "    print(tempCountriesD.loc[:,'Country'])\n",
    "    print('')\n",
    "    \n",
    "if len(medCountriesB) == 0:\n",
    "    print(\"Mediterranean has no birth outliers.\")\n",
    "    print('')\n",
    "else:\n",
    "    print(\"Mediterranean has the following birth outliers:\")\n",
    "    print(medCountriesB.loc[:,'Country'])\n",
    "    print('')\n",
    "if len(medCountriesD) == 0:\n",
    "    print(\"Mediterranean has no death outliers.\")\n",
    "    print('')\n",
    "else:\n",
    "    print(\"Mediterranean has the following death outliers:\")\n",
    "    print(medCountriesD.loc[:,'Country'])\n",
    "    print('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot data analysis\n",
    "dryTropical = birthMortalityDF[(birthMortalityDF[\"Climate\"] == 1)]['Birthrate']\n",
    "wetTropical = birthMortalityDF[(birthMortalityDF[\"Climate\"] == 2)]['Birthrate']\n",
    "temperate = birthMortalityDF[(birthMortalityDF[\"Climate\"] == 3)]['Birthrate']\n",
    "mediterranean = birthMortalityDF[(birthMortalityDF[\"Climate\"] == 4)]['Birthrate']\n",
    "\n",
    "summaryClimate = [dryTropical, wetTropical, temperate, mediterranean]\n",
    "\n",
    "fig1, ax1 = plt.subplots()\n",
    "ax1.set_title('Birthrate vs Climate')\n",
    "ax1.set_ylabel('Birthrate')\n",
    "ax1.set_xlabel('Climates')\n",
    "ax1.set_xticklabels(['Dry Tropical', 'Wet Tropical', 'Temperate', 'Mediterranean'])\n",
    "ax1.boxplot(summaryClimate)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot data for analysis\n",
    "dryTropical = birthMortalityDF[(birthMortalityDF[\"Climate\"] == 1)]['Deathrate']\n",
    "wetTropical = birthMortalityDF[(birthMortalityDF[\"Climate\"] == 2)]['Deathrate']\n",
    "temperate = birthMortalityDF[(birthMortalityDF[\"Climate\"] == 3)]['Deathrate']\n",
    "mediterranean = birthMortalityDF[(birthMortalityDF[\"Climate\"] == 4)]['Deathrate']\n",
    "\n",
    "summaryClimate = [dryTropical, wetTropical, temperate, mediterranean]\n",
    "\n",
    "fig1, ax1 = plt.subplots()\n",
    "ax1.set_title('Deathrate vs Climate')\n",
    "ax1.set_ylabel('Deathrate')\n",
    "ax1.set_xlabel('Climates')\n",
    "ax1.set_xticklabels(['Dry Tropical', 'Wet Tropical', 'Temperate', 'Mediterranean'])\n",
    "ax1.boxplot(summaryClimate)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
